sim_normal = function(num){
mean = 600
std = 30 # standard deviation
dist = rnorm(num, mean, std);
title = paste('Normal distribution with ', as.character(num), ' values')
dist.summary(dist,title)
print('Emperical 95% CIs')
print(comp.ci(dist))
NULL
}
sim_normal(100)
sim_normal(100)
sim_normal = function(num){
mean = 600
std = 30 # standard deviation
dist = rnorm(num, mean, std);
title = paste('Normal distribution with ', as.character(num), ' values')
summary(dist,title)
print('Emperical 95% CIs')
print(comp.ci(dist))
NULL
}
sim_normal(100)
sim_normal(100)
sim_normal = function(num){
mean = 600
std = 30 # standard deviation
dist = rnorm(num, mean, std);
title = paste('Normal distribution with ', as.character(num), ' values')
summary(dist,title)
print('Emperical 95% CIs')
print(dist)
NULL
}
sim_normal(100)
# function to plot and print summary of the distribution
dist_summary <- function(dist, name, num_bins = 120){
maxm = max(dist)
minm = min(dist)
bw = (maxm - minm) / num_bins
breaks <- seq(minm-bw/2, maxm+bw/2, by=bw)
hist(dist, col='blue', breaks = breaks, xlab = name, main = paste('Distribution of ', name))
std = round(std(dist), digits=2)
print(paste('Summary of', name, '; with std = ', std))
print(summary(dist))
}
source('~/dataScientist_edx/Mod3/myLemonade.R')
nums = c(100, 1000, 10000)
lapply(nums, sim_normal)
source('~/dataScientist_edx/Mod3/myLemonade.R')
lapply(nums, sim_normal)
source('~/dataScientist_edx/Mod3/myLemonade.R')
source('~/dataScientist_edx/Mod3/myLemonade.R')
lapply(nums, sim_normal)
source('~/dataScientist_edx/Mod3/myLemonade.R')
source('~/dataScientist_edx/Mod3/myLemonade.R')
lapply(nums, sim_normal)
source('~/dataScientist_edx/Mod3/myLemonade.R')
lapply(nums, sim_poisson)
source('~/dataScientist_edx/Mod3/myLemonade.R')
lapply(nums, sim_poisson)
lapply(nums, sim_poisson(10000))
sim_poisson(10000)
unif
unif
unif()
source('~/dataScientist_edx/Mod3/myLemonade.R')
source('~/dataScientist_edx/Mod3/myLemonade.R')
lapply(nums, sim_poisson(10000))
sim_poisson <- function(num, mean = 600){
## Simulate from a Poisson distribution
dist = rpois(num, mean)
titl = paste('Poisson distribution with ', as.character(num), ' values')
dist_summary(dist, titl)
print('Empirical 95% CIs')
print(compute_ci(dist))
NULL
}
sim_poisson(10000)
sim_poisson(100000)
lapply(sim_normal)
lapply(sim_normal(num = 1000))
lapply(num, sim_normal())
lapply(num, sim_normal(num = 600))
lapply(nums, sim_normal(num = 600))
lapply(nums, sim_normal)
lapply(nums, sim_poisson)
sim_poisson(100000)
sim_poisson(10000)
sim_poisson(100000)
sim_lemonade(100)
source('~/dataScientist_edx/Mod3/myLemonade.R')
## Simulate the profits and tips for a lemonade stand.
sim.lemonade <- function(num, mean = 600, sd = 30, pois = FALSE){
## number of customer arrivals
if(pois){
arrivals <- rpois(num, mean)
} else {
arrivals <- rnorm(num, mean, sd)
}
dist_summary(arrivals, 'customer arrivals per day')
## Compute distibution of average profit per arrival
proft <- profits(num)
dist_summary(proft, 'profit per arrival')
## Total profits are profit per arrival times number of arrivals.
total.profit <- arrivals * proft
dist_summary(total.profit, 'total profit per day')
## Compute distribution of average tips per arrival
tps <- tips(num)
dist_summary(tps, 'tips per arrival')
## Compute average tips per day
total.tips <- arrivals * tps
dist_summary(total.tips, 'total tips per day')
## Compute total profits plus total tips and normalize.
total.take <- total.profit + total.tips
dist_summary(total.take, 'total net per day')
}
source('~/dataScientist_edx/Mod3/myLemonade.R')
sim_lemonade()
sim_lemonade()
source('~/dataScientist_edx/Mod3/myLemonade.R')
sim_lemonade()
sim_lemonade(100)
sim_lemonade(1000)
sim_lemonade(10000)
sim_lemonade(100000)
source('~/dataScientist_edx/edx/Mod3/mySimulation.R')
source('~/dataScientist_edx/edx/Mod3/mySimulation2.R')
## Simulate Customers Using a Normal Distribution
sim.normal <- function(num, mean = 600, sd = 30){
dist = rnorm(num, mean, sd)
titl = paste('Normal: ', as.character(num), ' values')
dist.summary(dist, titl)
print('Empirical 95% CIs')
print(comp.ci(dist))
NULL
}
nums <- c(100, 1000, 10000, 100000)
lapply(nums, sim.normal)
## Simulate Customers Using a Poisson Distribution
sim.poisson <- function(num, mean = 600){
## Simulate from a Poisson distribution
dist = rpois(num, mean)
titl = paste('Poisson: ', as.character(num), ' values')
dist.summary(dist, titl)
print('Empirical 95% CIs')
print(comp.ci(dist))
NULL
}
sim.poisson(100000)
profits <- function(num){
unif <- runif(num)
ifelse(unif < 0.3, 5,
ifelse(unif < 0.6, 3.5, 4))
}
prfts <- profits(100000)
dist.summary(prfts, 'profits')
tips <- function(num){
unif <- runif(num)
ifelse(unif < 0.5, 0, #50% give no tips
ifelse(unif < 0.7, 0.25, #30% give .25$
ifelse(unif < 0.9, 1, 2))) # 10% give 1$
}
tps <- tips(100000)
dist.summary(tps, 'tips')
source('~/dataScientist_edx/edx/Mod3/mySimulation2.R')
sim.lemonade(100000)
sim.normal <- function(num, mean = 1200, sd = 40){
dist = rnorm(num, mean, sd)
titl = paste('Normal: ', as.character(num), ' values')
dist.summary(dist, titl)
print('Empirical 95% CIs')
print(comp.ci(dist))
NULL
}
sim.poisson <- function(num, mean = 1200){
## Simulate from a Poisson distribution
dist = rpois(num, mean)
titl = paste('Poisson: ', as.character(num), ' values')
dist.summary(dist, titl)
print('Empirical 95% CIs')
print(comp.ci(dist))
NULL
}
sim.lemonade <- function(num, mean = 1200, sd = 40, pois = FALSE){
## pois: poisson distribution
## number of customer arrivals
if(pois){
arrivals <- rpois(num, mean)
} else {
arrivals <- rnorm(num, mean, sd)
}
dist.summary(arrivals, 'customer arrivals per day')
## Compute distibution of average profit per arrival
proft <- profits(num)
dist.summary(proft, 'profit per arrival')
## Total profits are profit per arrival times number of arrivals.
total.profit <- arrivals * proft
dist.summary(total.profit, 'total profit per day')
## Compute distribution of average tips per arrival
tps <- tips(num)
dist.summary(tps, 'tips per arrival')
## Compute average tips per day
total.tips <- arrivals * tps
dist.summary(total.tips, 'total tips per day')
## Compute total profits plus total tips and normalize.
total.take <- total.profit + total.tips
dist.summary(total.take, 'total net per day')
}
sim.lemonade(100000)
sim.lemonade <- function(num, mean = 1200, sd = 20, pois = FALSE){
## pois: poisson distribution
## number of customer arrivals
if(pois){
arrivals <- rpois(num, mean)
} else {
arrivals <- rnorm(num, mean, sd)
}
dist.summary(arrivals, 'customer arrivals per day')
## Compute distibution of average profit per arrival
proft <- profits(num)
dist.summary(proft, 'profit per arrival')
## Total profits are profit per arrival times number of arrivals.
total.profit <- arrivals * proft
dist.summary(total.profit, 'total profit per day')
## Compute distribution of average tips per arrival
tps <- tips(num)
dist.summary(tps, 'tips per arrival')
## Compute average tips per day
total.tips <- arrivals * tps
dist.summary(total.tips, 'total tips per day')
## Compute total profits plus total tips and normalize.
total.take <- total.profit + total.tips
dist.summary(total.take, 'total net per day')
}
sim.lemonade(100000)
require("dplyr")
path
pwd
frame1 = "/home/torsh/data_science_ml/edx/Mod4/"
directory = "/home/torsh/data_science_ml/edx/Mod4/"
file = "test_data.csv"
path = file.path(dir, file)
path = file.path(directory, file)
frame1 = read.csv(path, header = TRUE, stringsAsFactors = FALSE)
frame1 = filter(frame1, col == 2012)
frame1 = filter(frame1, col1 == 2012)
frame1 = filter(frame1, col1 == 2013)
frame1 = filter(frame1, col1 == 2013)
head(frame1)
head(frame1)
frame1 = select(frame1, engine.location, horsepower)
head(frame1)
directory = "/home/torsh/data_science_ml/edx/Mod4/"
fileName = "test_data.csv"
path = file.path(directory, fileName)
# make data frame
frame1 = read.csv(path, header = TRUE, stringsAsFactors = FALSE)
# get the header of data frame
head(frame1)
frame1 = select(frame1, engine.location, horsepower)
head(frame1)
frame1 = head(select(frame1,
-fuel.system, -bore, -stroke, -compression.ratio,
-horsepower, -peak.rpm, -city.mpg, -highway.mpg, -price
))
# select all except some
head(select(frame1, -fuel.system, -bore, -stroke, -compression.ratio,
-horsepower, -peak.rpm, -city.mpg, -highway.mpg, -price
))
select(fuel.system)
select(frame1, fuel.system)
select(frame1, horsepower)
select(frame1, bore)
select(frame1, bore)
select(frame1, stroke)
select(frame1, compression.ratio)
select(frame1, peak.rpm)
select(frame1, city.mpg)
select(frame1, highway.mpg)
select(frame1)
head(frame1)
frame1 = read.csv(path, header = TRUE, stringsAsFactors = FALSE)
# get the header of data frame
head(frame1)
# select statements
frame2 = select(frame1, engine.location, horsepower)
head(frame2)
# select all except some
head(select(frame1, -fuel.system, -bore, -stroke, -compression.ratio,
-horsepower, -peak.rpm, -city.mpg, -highway.mpg, -price
))
head(select(frame1, engine.size))
head(select(frame1, engine.size:order))
head(select(frame1, engine.size:order(decreasing = TRUE)))
head(select(frame1, engine.size:order))
head(select(frame1, make:engine.size))
head(select(frame1, starts_with("engine")))
library(ggplot2)
ggplot(frame2, aes(engine.location, horsepower))
frame2 = select(frame1, engine.size, horsepower)
head(frame2)
ggplot(frame2, aes(engine.size, horsepower))
ggplot(frame2, aes(horsepower, engine.size))
ggplot(frame2, aes(engine.size, horsepower))
ggplot(frame2, aes(engine.size, horsepower) + geom_point(colo))
ggplot(frame2, aes(engine.size, horsepower) + geom_point(color = black))
ggplot(frame2, aes(engine.size, horsepower) + geom_point(color = green))
ggplot(frame2, aes(engine.size, horsepower) + geom_point(color = "green"))
ggplot(frame2, aes(engine.size, horsepower) + geom_point(color="firebrick))
ggplot(frame2, aes(engine.size, horsepower) + geom_point(color="firebrick))
ggplot(frame2, aes(engine.size, horsepower) + geom_point(color="firebrick"))
ggplot(frame2, aes(engine.size, horsepower)) + geom_point(color="firebrick)
ggplot(frame2, aes(engine.size, horsepower)) + geom_point(color="firebrick")
ggplot(frame2, aes(engine.size, horsepower)) + geom_point(color="green")
ggplot(frame2, aes(engine.size, horsepower)) + geom_point(color="black")
ggplot(frame2, aes(engine.size, horsepower)) + geom_point(color="black") + ggtitle("size and power dependency")
frame2 = select(frame1, order[engine.size], order[horsepower])
horsepower = select(frame1, horsepower)
engine.size = select(frame1, engine.size)
head(horsepower)
head(engine.size)
library(ggplot2)
ggplot(frame1, aes(engine.size, horsepower))
+ geom_point(color="black")
+ ggtitle("size and power dependency")
frame2 = select(frame1, order(engine.size, horsepower))
head(frame2)
library(ggplot2)
ggplot(frame2, aes(engine.size, horsepower))
frame2 = select(frame1, engine.size, horsepower)
head(frame2)
library(ggplot2)
ggplot(frame2, aes(engine.size, horsepower))
+ geom_point(color="black")
+ ggtitle("size and power dependency")
ggplot(frame2, aes(engine.size, horsepower)) + geom_point(color="black") + ggtitle("size and power dependency")
frame2 = select(frame1, order(engine.size, horsepower))
head(frame2)
ggplot(frame2, aes(engine.size, horsepower)) + geom_point(color="black") + ggtitle("size and power dependency")
frame2 = select(frame1, engine.size, horsepower)
ggplot(frame2, aes(engine.size, horsepower)) + geom_point(color="black") + ggtitle("size and power dependency")
frame2
ggplot(frame2, aes(order(engine.size), horsepower)) + geom_point(color="black") + ggtitle("size and power dependency")
ggplot(frame2, aes(order(engine.size), order(horsepower)) + geom_point(color="black") + ggtitle("size and power dependency")
ggplot(frame2, aes(order(engine.size), order(horsepower))) + geom_point(color="black") + ggtitle("size and power dependency")
ggplot(frame2, aes(engine.size, order(horsepower))) + geom_point(color="black") + ggtitle("size and power dependency")
max(engine.size)
max(horsepower)
horsepower
2+2
x <- 1:5
x <- 1:5
x
z <- c(3,4,5,6,7,8)
c
x
max(z)
min(z)
data <- read.csv("/home/torsh/data_science_ml/edx/Mod1/Credit-Scoring-Clean.csv", sep = ",")
# Graphs:
View(data)
Credit-Scoring-Clean
x <- data$Duration
y <- data$Employment
plot(x,y)
getwd()
c
z
z <- c(3,4,5,6,7,8) # int array c
c <- rep(1, time(5))
c <- rep(1, time(5))
c <- rep(1, times(5))
c <- rep(1, times = 5)
c <- rep(3, times = 5)
c <- rep(c, times = 5)
c <- rep(z, times = 5)
z <- c(3,4,5) # int array c
c <- rep(z, times = 3)
d <- c(a,x)
a <- c(3,7,9,11)
x <- 25
d <- c(a,x)
a1 <- 1:10
a7 <- rep(7, times = 3)
a10_to_1 <- 10:1
median(a1)
A = matrix(c(2,4,3,1,5,7), nrow = 2, ncol = 3)
A
A = matrix(c(2,4,3,1,5,7), nrow = 3, ncol = 2)
A
A = matrix(c(2,4,3,1,5), nrow = 3, ncol = 2)
A[2,3]
A = matrix(c(2,4,3,1,5,7), nrow = 2, ncol = 3)
A[2,3]
A[2,]
A[,2]
A
A[,2]
A[,2]
f <- A[,2]
P <- matrix(c(1:6, 6:1, rep(2, times =6)), nrow = 6, ncol = 3)
P
P[2,3]
data <- read.table("/home/torsh/data_science_ml/R-basic/husdata.cvs")
data <- read.table('/home/torsh/data_science_ml/R-basic/husdata.cvs')
setwd("/home/torsh/data_science_ml/R-basic/husdata.cvs")
data <- read.table("husdata.csv")
setwd("/home/torsh/data_science_ml/R-basic/husdata.cvs")
setwd("/home/torsh/data_science_ml/R-basic/husdata.cvs")
setwd("/home/torsh/data_science_ml/R-basic/")
setwd("/home/torsh/data_science_ml/R-basic/")
data <- read.table("husdata.csv")
view(data)
View(data)
data <- read.table("husdata.csv", sep = ";")
View(data)
View(data)
data <- read.table("husdata.csv", header=TRUE, sep = ";")
View(data)
data <- read.table("husdata.csv", sep = ";")
View(data)
data <- read.table("husdata.csv", header=TRUE, sep = ";")
View(data)
summary(data)
husprisesr
huspriser
data$huspriser
data$huspriser
p <- data$huspriser
p
year <- data$aar
year
plot(p)
plot(year, p)
plot(year, p, xlab = "aarstal", xlab = "huspriser (mio.DKK)")
plot(year, data$befolk, xlab = "aarstal", ylab = "befolkning")
par(mfrow=c(1,2))
plot(year, p, xlab = "aarstal", xlab = "huspriser (mio.DKK)") par(mfrow=c(1,2))
plot(year, data$befolk, xlab = "aarstal", ylab = "befolkning") par(mfrow=c(1,2))
par(mfrow=c(1,2))
par(mfrow=c(1,2))
par(mfrow=c(1,2))
plot(year, p, xlab = "aarstal", xlab = "huspriser (mio.DKK)")
plot(year, data$befolk, xlab = "aarstal", ylab = "befolkning")
# show multiple graphs in one page
par(mfrow=c(1,2))
par(mfrow=c(2,2))
plot(year, p, xlab = "aarstal", xlab = "huspriser (mio.DKK)")
plot(year, data$befolk, xlab = "aarstal", ylab = "befolkning")
par(mfrow=c(1,2))
plot(year, p, xlab = "aarstal", xlab = "huspriser (mio.DKK)")
par(mfrow=c(2,2))
plot(year, data$befolk, xlab = "aarstal", ylab = "befolkning")
par(mfrow=c(1,2))
plot(year, data$befolk, xlab = "aarstal", ylab = "befolkning")
# show multiple graphs in one page
# ----------------------- #
#data <- read.table("path" .sep, head(TRUE)) # læs data komma sep,
par(mfrow=c(1,2))
plot(year, p, xlab = "aarstal", xlab = "huspriser (mio.DKK)")
par(mfrow=c(2,1))
plot(year, data$befolk, xlab = "aarstal", ylab = "befolkning")
par(mfrow=c(2,2))
plot(year, data$befolk, xlab = "aarstal", ylab = "befolkning")
par(mfrow=c(1,2))
plot(year, p, xlab = "aarstal", xlab = "huspriser (mio.DKK)")
par(mfrow=c(2,2))
plot(year, data$befolk, xlab = "aarstal", ylab = "befolkning")
par(mfrow=c(1,2))
plot(year, p, xlab = "aarstal", xlab = "huspriser (mio.DKK)")
#par(mfrow=c(2,2))
plot(year, data$befolk, xlab = "aarstal", ylab = "befolkning")
par(mfrow=c(1,1))
plot(year, p, xlab = "aarstal", xlab = "huspriser (mio.DKK)")
#par(mfrow=c(2,2))
plot(year, data$befolk, xlab = "aarstal", ylab = "befolkning")
# show multiple graphs in one page
par(mfrow=c(2,1))
plot(year, p, xlab = "aarstal", xlab = "huspriser (mio.DKK)")
#par(mfrow=c(2,2))
plot(year, data$befolk, xlab = "aarstal", ylab = "befolkning")
par(mfrow=c(1,2))
plot(year, p, xlab = "aarstal", xlab = "huspriser (mio.DKK)")
#par(mfrow=c(2,2))
plot(year, data$befolk, xlab = "aarstal", ylab = "befolkning")
# show multiple graphs in one page
# ----------------------- #
#data <- read.table("path" .sep, head(TRUE)) # læs data komma sep,
data <- read.csv("/home/torsh/data_science_ml/edx/Mod1/Credit-Scoring-Clean.csv", sep = ",")
View(data) #show data
plot(year, p, xlab = "aarstal", xlab = "huspriser (mio.DKK)")
par(mfrow=c(1,2))
plot(year, p, xlab = "aarstal", ylab = "huspriser (mio.DKK)")
#par(mfrow=c(2,2))
plot(year, data$befolk, xlab = "aarstal", ylab = "befolkning")
dnorm(10, mean=7, sd=5)
dnorm(7, mean=4, sd=6)
pnorm(10, mean = 7, sd = 5)
1 - pnorm(10, mean = 7, sd = 5)
pnorm(7, mean = 4, sd = 6)
1 - pnorm(7, mean = 4, sd = 6)
rnorm( n=500, mean = 7, sd = 5)
plot(rnorm( n=500, mean = 7, sd = 5))
rand_data = rnorm( n=500, mean = 7, sd = 5)
plot(rand_data)
K = rnorm( n=200, mean = 4, sd = 6)
# density function of K
J = dnorm(K)
plot(K,J)
pbinom(26, size = 51, prob = 0.5)
dbinom(26, size = 26, prob = 0.5)
